# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
  branches:
    include:
    - refactor-pipelines
  paths:
    include:
      - .azure-pipelines/*


variables:
  targets: >
    {
      linuxPy36:
      {
        pythonVersion: "3.6",
        imageName: 'ubuntu-latest',
        arch: "x64"
      },
      linuxPy37:
      {
        pythonVersion: "3.7",
        imageName: "ubuntu-latest",
        arch: "x64"
      },
      windowsPy36:
      {
        pythonVersion: "3.6",
        imageName: "windows-latest",
        arch: "x86"      
      },
      windowsPy37:
      {
        pythonVersion: "3.7",
        imageName: "windows-latest",
        arch: "x86"      
      },
      macOSPy36:
      {
        pythonVersion: "3.6",
        imageName: "macOS-latest",
        arch: "x64"
      },
      macOSPy37: 
      {
        pythonVersion: "3.7",
        imageName: "macOS-latest",
        arch: "x64"
      }

    }

stages:

- stage: 'lint'
  displayName: Format and lint code
  jobs:
  - job: 'lint'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - checkout: self
        fetchDepth: 1
      - template: templates/lint.yml

- stage: 'test'
  displayName: 'Unit Tests'
  jobs:

    - job: 'test'
      strategy:
        matrix: $[ variables.targets ]
      displayName: 'Test $(imageName) on Python $(pythonVersion)'
      pool:
        vmImage: '$(imageName)'
      steps:
      - checkout: self
        fetchDepth: 1
      - template: templates/test.yml
        parameters:
          version: '$(pythonVersion)'
          arch: '$(arch)'
          os: '$(imageName)'

- stage: 'build'
  displayName: 'Build GudPy exe'
  jobs:

    - job: 'build'
      strategy:
        matrix: $[ variables.targets ]
      displayName: 'Build on $(imageName) with Python $(pythonVersion)'
      pool:
        vmImage: '$(imageName)'
      steps:
        - checkout: self
          fetchDepth: 1
        - template: templates/build.yml
          parameters:
            version: '$(pythonVersion)'
            arch: '$(arch)'
            os: '$(imageName)'


    