# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
  branches:
    include:
    - refactor-pipelines
  paths:
    include:
      - .azure-pipelines/*


variables:
  targets: >
    {
      linux-py-36:
      {
        python.version: '3.6',
        image.name: 'ubuntu-latest',
        arch: 'x64'
      },
      linux-py-37:
      {
        python.version: '3.7',
        image.name: 'ubuntu-latest',
        arch: 'x64'
      },
      windows-py-36:
      {
        python.version: '3.6',
        image.name: 'windows-latest',
        arch: 'x86'      
      },
      windows-py-37:
      {
        python.version: '3.7',
        image.name: 'windows-latest',
        arch: 'x86'      
      },
      macOS-py-36:
      {
        python.version: '3.6',
        image.name: 'macOS-latest',
        arch: 'x64'
      },
      macOS-py-37: 
      {
        python.version: '3.7',
        image.name: 'macOS-latest',
        arch: 'x64'
      }

    }

stages:

- stage: 'lint'
  displayName: Format and lint code
  jobs:
  - job: 'lint'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - checkout: self
        fetchDepth: 1
      - template: templates/lint.yml

- stage: 'test'
  displayName: 'Unit Tests'
  jobs:

    - job: 'test'
      strategy:
        matrix: $[ variables.targets ]
      displayName: 'Test $(image.name) on Python $(python.version)'
      pool:
        vmImage: '$(image.name)'
      steps:
      - checkout: self
        fetchDepth: 1
      - template: templates/test.yml
        parameters:
          version: '$(python.version)'
          arch: '$(arch)'
          os: '$(image.name)'

- stage: 'build'
  displayName: 'Build GudPy exe'
  jobs:

    - job: 'build'
      strategy:
        matrix: $[ variables.targets ]
      displayName: 'Build on $(image.name) with Python $(python.version)'
      pool:
        vmImage: '$(image.name)'
      steps:
        - checkout: self
          fetchDepth: 1
        - template: templates/build.yml
          parameters:
            version: '$(python.version)'
            arch: '$(arch)'
            os: '$(image.name)'


    