parameters:
- name: 'version'
  default: '3.9'
  type: string
- name: 'arch'
  default: 'x64'
  type: string
- name: os
  default: 'ubuntu'
  type: string
- name: osName
  default: 'linux'
  type: string
- name: gudrunTag
  default: ''
  type: string
- name: modexTag
  default: ''
  type: string
- name: publishImage
  default: 'false'
  type: string

steps:
  - task: UsePythonVersion@0
    displayName: "Use Python Version ${{ parameters.version }}"
    inputs:
      versionSpec: ${{ parameters.version }}
      architecture: ${{ parameters.arch }}

  - script: |
      pip install --upgrade pip
      pip install -r requirements.txt
    displayName: "Install dependencies"

  - bash: |
      sudo apt-get update
      sudo apt-get install libopengl0 -y 
      sudo apt-get install libegl1-mesa -y
    condition: eq(variables.osName, 'linux')
    displayName: "Install OpenGL for linux"

  - bash: |
      curl -L https://github.com/disorderedmaterials/Gudrun/releases/download/${{ parameters.gudrunTag }}/binaries-${{ parameters.gudrunTag }}-${{ parameters.osName }}.zip > binaries.zip
      unzip binaries.zip
      mv binaries-${{ parameters.gudrunTag }}-${{ parameters.osName }}/* bin
      curl -L https://github.com/disorderedmaterials/Gudrun/releases/download/${{ parameters.gudrunTag }}/startupFiles-${{ parameters.gudrunTag }}.zip > startupFiles.zip
      unzip startupFiles.zip
      mv StartupFiles bin/StartupFiles
      
  - script: |
      pip install pyinstaller
      
  - bash: |
      PYINSTALLER_PATH=$(pip show pyinstaller | grep Location)
      PYINSTALLER_PATH=$(echo "${PYINSTALLER_PATH}" | awk '{print $2}')
      PYINSTALLER_PATH="${PYINSTALLER_PATH}/pyinstaller/compat.py"
      sed -i '' -e 's/out, err = proc.communicate(timeout=60)/out, err = proc.communicate(timeout=240)/g' "${PYINSTALLER_PATH}"
    condition: eq(variables.osName, 'osx')
    displayName: 'Increase timeouts for OSX'

  - bash: |
      pyside6-rcc gudpy/gui/widgets/resources/resources.qrc -o gudpy/gui/widgets/resources/resources_rc.py
      pyinstaller gudpy.spec
    displayName: 'Create executables.'

  - bash: |
      pip install dmgbuild
      VERSION=$(grep "VERSION =" gudpy.spec | sed "s/.*\"\(.*\)\"/\1/g")
      sed -i '' -e 's/VERSION/$VERSION/g' ci/settings.py
      dmgbuild -s ci/settings.py "GudPy-$VERSION" dist/GudPy-$VERSION.dmg
    condition: eq(variables.osName, 'osx')
    displayName: 'Create DMG for OSX.'

  - bash: |
      VERSION=$(grep "VERSION =" gudpy.spec | sed "s/.*\"\(.*\)\"/\1/g")
      7z a dist/GudPy-$VERSION-windows.zip dist/GudPy-$VERSION/
    condition: eq(variables.osName, 'windows')
    displayName: 'Zip windows non-bundled version.'

  - bash: |
      sudo apt-get update && \
      sudo apt-get install -y build-essential \
      libseccomp-dev pkg-config squashfs-tools cryptsetup
      git clone https://github.com/hpcng/singularity.git $(Agent.HomeDirectory)/go/singularity
      cd $(Agent.HomeDirectory)/go/singularity
      git fetch && git checkout v3.7.2
      ./mconfig && make -C ./builddir && sudo make -C ./builddir install
    condition: eq(variables.osName, 'linux')
    displayName: "Compile singularity for linux." 

  - bash: |
      VERSION=$(grep "VERSION =" gudpy.spec | sed "s/.*\"\(.*\)\"/\1/g")
      sudo singularity build dist/GudPy-$VERSION.sif ci/singularity/ubuntu20.04.def
    condition: eq(variables.osName, 'linux')
    displayName: "Build singularity image"

  - bash: |
      VERSION=$(grep "VERSION =" gudpy.spec | sed "s/.*\"\(.*\)\"/\1/g") 
      singularity remote login --username ${HARBOR_USER} --password ${HARBOR_SECRET} docker://harbor.stfc.ac.uk
      singularity push dist/GudPy-$VERSION.sif oras://harbor.stfc.ac.uk/isis_disordered_materials/gudpy:latest
    condition: and(eq(variables.osName, 'linux'), eq(variables.publishImage, 'true'))
    env:
        HARBOR_USER: $(HARBOR_USER)
        HARBOR_SECRET: $(HARBOR_SECRET)
    displayName: "Publish singularity image to Harbor registry."
