parameters:
- name: 'version'
  default: '3.9'
  type: string
- name: 'arch'
  default: 'x64'
  type: string
- name: os
  default: 'ubuntu'
  type: string
- name: osName
  default: 'linux'
  type: string
- name: gudrunTag
  default: ''
  type: string
steps:
  - task: UsePythonVersion@0
    displayName: "Use Python Version ${{ parameters.version }}"
    inputs:
      versionSpec: ${{ parameters.version }}
      architecture: ${{ parameters.arch }}

  - script: |
      pip install --upgrade pip
      pip install -r requirements.txt
    displayName: "Install dependencies"

  - bash: |
      sudo apt-get update
      sudo apt-get install libopengl0 -y 
      sudo apt-get install libegl1-mesa -y
    condition: eq(variables.osName, 'linux')
    displayName: "Install OpenGL for linux"

  - bash: |
      curl -L https://github.com/disorderedmaterials/Gudrun/releases/download/${{ parameters.gudrunTag }}/binaries-${{ parameters.gudrunTag }}-${{ parameters.osName }}.zip > binaries.zip
      unzip binaries.zip
      mv binaries-${{ parameters.gudrunTag }}-${{ parameters.osName }} bin
      curl -L https://github.com/disorderedmaterials/Gudrun/releases/download/${{ parameters.gudrunTag }}/startupFiles-${{ parameters.gudrunTag }}.zip > startupFiles.zip
      unzip startupFiles.zip
      mv StartupFiles bin
      
  - script: |
      pip install pyinstaller
      
  - bash: |
      PYINSTALLER_PATH=$(pip show pyinstaller | grep Location)
      PYINSTALLER_PATH=$(echo "${PYINSTALLER_PATH}" | awk '{print $2}')
      PYINSTALLER_PATH="${PYINSTALLER_PATH}/pyinstaller/compat.py"
      sed -i '' -e 's/out, err = proc.communicate(timeout=60)/out, err = proc.communicate(timeout=240)/g' "${PYINSTALLER_PATH}"
    condition: eq(variables.osName, 'osx')
    displayName: 'Increase timeouts for OSX'

  - bash: |
      pyside6-rcc src/gui/widgets/resources/resources.qrc -o src/gui/widgets/resources/resources_rc.py
      pyinstaller gudpy.spec
    displayName: 'Create executables.'
  
  - bash: |
      pip install dmgbuild
      VERSION=$(grep "VERSION =" gudpy.spec | sed "s/.*\"\(.*\)\"/\1/g")
      sed -i '' -e 's/VERSION/$VERSION/g' ci/settings.py
      dmgbuild -s ci/settings.py "GudPy-$VERSION" dist/GudPy-$VERSION.dmg
    condition: eq(variables.osName, 'osx')
    displayName: 'Create DMG for OSX.'

  - bash: |
      VERSION=$(grep "VERSION =" gudpy.spec | sed "s/.*\"\(.*\)\"/\1/g")
      7z a dist/GudPy-$VERSION-windows.zip dist/GudPy-$VERSION/
    condition: eq(variables.osName, 'windows')
    displayName: 'Zip windows non-bundled version.'

  - bash: |
      sudo apt-get update && \
      sudo apt-get install -y build-essential \
      libseccomp-dev pkg-config squashfs-tools cryptsetup

      sudo rm -r /usr/local/go

      export VERSION=1.13.15 OS=linux ARCH=amd64

      wget -O /tmp/go${VERSION}.${OS}-${ARCH}.tar.gz https://dl.google.com/go/go${VERSION}.${OS}-${ARCH}.tar.gz && \
      sudo tar -C /usr/local -xzf /tmp/go${VERSION}.${OS}-${ARCH}.tar.gz

      echo 'export GOPATH=${HOME}/go' >> ~/.bashrc && \
      echo 'export PATH=/usr/local/go/bin:${PATH}:${GOPATH}/bin' >> ~/.bashrc && \
      source ~/.bashrc

      curl -sfL https://install.goreleaser.com/github.com/golangci/golangci-lint.sh |
      sh -s -- -b $(go env GOPATH)/bin v1.21.0

      sudo mkdir -p ${GOPATH}/src/github.com/sylabs && \
      cd ${GOPATH}/src/github.com/sylabs && \
      sudo git clone https://github.com/sylabs/singularity.git && \
      cd singularity

      sudo git checkout release-3.9

      sudo cd ${GOPATH}/src/github.com/sylabs/singularity && \
      sudo ./mconfig && \
      cd ./builddir && \
      sudo make && \
      sudo make install

      singularity version
    condition: eq(variables.osName, 'linux')
    displayName: "Install singularity for linux."    