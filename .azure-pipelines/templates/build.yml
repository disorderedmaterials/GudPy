parameters:
- name: 'version'
  default: '3.9'
  type: string
- name: 'arch'
  default: 'x64'
  type: string
- name: os
  default: 'ubuntu'
  type: string
- name: osName
  default: 'linux'
  type: string
- name: gudrunTag
  default: ''
  type: string
steps:
  - task: UsePythonVersion@0
    displayName: "Use Python Version ${{ parameters.version }}"
    inputs:
      versionSpec: ${{ parameters.version }}
      architecture: ${{ parameters.arch }}

  - script: |
      pip install --upgrade pip
      pip install -r requirements.txt
    displayName: "Install dependencies"

  - bash: |
      sudo apt-get install libopengl0 -y
    condition: eq( '${{ parameters.osName }}', 'linux')
    displayName: "Install OpenGL"

  - bash: |
      curl -L https://github.com/disorderedmaterials/Gudrun/releases/download/${{ parameters.gudrunTag }}/binaries-${{ parameters.gudrunTag }}-${{ parameters.osName }}.zip > binaries.zip
      unzip binaries.zip
      mv binaries-${{ parameters.gudrunTag }}-${{ parameters.osName }} bin
      curl -L https://github.com/disorderedmaterials/Gudrun/releases/download/${{ parameters.gudrunTag }}/startupFiles-${{ parameters.gudrunTag }}.zip > startupFiles.zip
      unzip startupFiles.zip
      mv StartupFiles bin
      
  - script: |
      pip install pyinstaller
      
  - bash: |
      PYINSTALLER_PATH=$(pip show pyinstaller | grep Location)
      PYINSTALLER_PATH=$(echo "${PYINSTALLER_PATH}" | awk '{print $2}')
      PYINSTALLER_PATH="${PYINSTALLER_PATH}/pyinstaller/compat.py"
      sed -i '' -e 's/out, err = proc.communicate(timeout=60)/out, err = proc.communicate(timeout=240)/g' "${PYINSTALLER_PATH}"
      brew install npm
      npm install -g create-dmg
    condition: eq( '${{ parameters.osName }}', 'osx')  
    displayName: 'Increase timeouts for OSX'
  - bash: |
      pyside6-rcc src/gui/widgets/resources/resources.qrc -o src/gui/widgets/resources/resources_rc.py
      pyinstaller gudpy.spec
    displayName: 'Create executables.'
  
  - bash: |
      create-dmg dist/*.app
      [ $? -eq 2 ]  || exit 0
    condition: eq( '${{ parameters.osName }}', 'osx')
    displayName: 'Create DMG for OSX.'
  - bash: |
      VERSION=$(grep "VERSION =" gudpy.spec | sed "s/.*\"\(.*\)\"/\1/g")
      7z a dist/GudPy-$VERSION-windows.zip dist/GudPy-$VERSION/
    condition: eq( '${{ parameters.osName }}', 'windows')
    displayName: 'Zip windows non-bundled version.'