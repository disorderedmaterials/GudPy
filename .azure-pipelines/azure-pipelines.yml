# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- main
stages:
- stage: Lint
  displayName: Format and lint code
  jobs:
  - job: "Lint_ubuntu"
    pool:
      vmImage: ubuntu-latest
    strategy:
      matrix:
        Python36:
          python.version: '3.6'
        Python37:
          python.version: '3.7'
        Python38:
          python.version: '3.8'
      maxParallel: 3
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
        architecture: "x64"
      displayName: "Use Python $(python.version)"
    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      displayName: 'Install dependencies'
    - script: |
        pip install black
        python -m black --target-version=py38 ./gudrun_classes
        python -m black --target-version=py38 ./scripts
        python -m black --target-version=py38 ./gui
        python -m black --target-version=py38 ./widgets
      displayName: "Apply black code formatting (PEP8 conformance)"

    - script: |
        pip install flake8
        python -m flake8 . --exit-zero
      condition: succeededOrFailed()
      displayName: "Static code analysis for PEP8 conformance using flake8"

    - script: python -m flake8 . --exit-zero > flake8.err.log
      displayName: "Capture flake8 error log"
      condition: Failed()
    
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: 'flake8.err.log'
        ArtifactName: 'Flake8 Error log file'
      continueOnError: True
      condition: Failed()

    - publish: $(System.DefaultWorkingDirectory)
      artifact: "FORMATTED_GudPy_ubuntu-latest_python$(python.version)"
      displayName: "Publish formatted code."
  - job: "Lint_windows"
    pool:
      vmImage: windows-latest
    strategy:
      matrix:
        Python36:
          python.version: '3.6'
        Python37:
          python.version: '3.7'
        Python38:
          python.version: '3.8'
      maxParallel: 3
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
        architecture: "x86"
      displayName: "Use Python $(python.version)"
    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      displayName: 'Install dependencies'
    - script: |
        pip install black
        python -m black --target-version=py38 ./gudrun_classes
        python -m black --target-version=py38 ./scripts
        python -m black --target-version=py38 ./gui
        python -m black --target-version=py38 ./widgets
      displayName: "Apply black code formatting (PEP8 conformance)"

    - script: |
        pip install flake8
        python -m flake8 . --exit-zero
      condition: succeededOrFailed()
      displayName: "Static code analysis for PEP8 conformance using flake8"

    - script: python -m flake8 . --exit-zero > flake8.err.log
      displayName: "Capture flake8 error log"
      condition: Failed()
    
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: 'flake8.err.log'
        ArtifactName: 'Flake8 Error log file'
      continueOnError: True
      condition: Failed()

    - publish: $(System.DefaultWorkingDirectory)
      artifact: "FORMATTED_GudPy_windows-latest_python$(python.version)"
      displayName: "Publish formatted code."
  - job: "Lint_macOS"
    pool:
      vmImage: macOS-latest
    strategy:
      matrix:
        Python36:
          python.version: '3.6'
        Python37:
          python.version: '3.7'
        Python38:
          python.version: '3.8'
      maxParallel: 3
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
        architecture: "x64"
      displayName: "Use Python $(python.version)"
    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      displayName: 'Install dependencies'
    - script: |
        pip install black
        python -m black --target-version=py38 ./gudrun_classes
        python -m black --target-version=py38 ./scripts
        python -m black --target-version=py38 ./gui
        python -m black --target-version=py38 ./widgets
      displayName: "Apply black code formatting (PEP8 conformance)"

    - script: |
        pip install flake8
        python -m flake8 . --exit-zero
      condition: succeededOrFailed()
      displayName: "Static code analysis for PEP8 conformance using flake8"

    - script: python -m flake8 . --exit-zero > flake8.err.log
      displayName: "Capture flake8 error log"
      condition: Failed()
    
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: 'flake8.err.log'
        ArtifactName: 'Flake8 Error log file'
      continueOnError: True
      condition: Failed()

    - publish: $(System.DefaultWorkingDirectory)
      artifact: "FORMATTED_GudPy_macOS-latest_python$(python.version)"
      displayName: "Publish formatted code."
- stage: Test
  displayName: Unit tests
  dependsOn: Lint
  condition: succeeded()
  jobs:
  - job: "Test_ubuntu"
    pool:
      vmImage: ubuntu-latest
    strategy:
      matrix:
        Python36:
          python.version: '3.6'
        Python37:
          python.version: '3.7'
        Python38:
          python.version: '3.8'
      maxParallel: 3
    steps:
    - checkout: none

    - task: DownloadPipelineArtifact@2
      displayName: "Download artifact from Linting stage"
      inputs:
        buildType: "current"
        artifactName: "FORMATTED_GudPy_ubuntu-latest_python$(python.version)"
        targetPath: "$(System.DefaultWorkingDirectory)"
    - task: UsePythonVersion@0
      inputs:
       versionSpec: '$(python.version)'
       architecture: "x64"
    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      displayName: "Install dependencies"
      
    - script: |
        pip install nose2
        nose2 --plugin nose2.plugins.junitxml --junit-xml tests
      displayName: 'Run tests'

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '*.xml'
        failTaskOnFailedTests: true
        testRunTitle: 'GudPy on Python $(python.version) (ubuntu)'
      condition: succeededOrFailed()
  - job: "Test_windows"
    pool:
      vmImage: windows-latest
    strategy:
      matrix:
        Python36:
          python.version: '3.6'
        Python37:
          python.version: '3.7'
        Python38:
          python.version: '3.8'
      maxParallel: 3
    steps:
    - checkout: none

    - task: DownloadPipelineArtifact@2
      displayName: "Download artifact from Linting stage"
      inputs:
        buildType: "current"
        artifactName: "FORMATTED_GudPy_windows-latest_python$(python.version)"
        targetPath: "$(System.DefaultWorkingDirectory)"
    - task: UsePythonVersion@0
      inputs:
       versionSpec: '$(python.version)'
       architecture: "x86"
    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      displayName: "Install dependencies"
      
    - script: |
        pip install nose2
        nose2 --plugin nose2.plugins.junitxml --junit-xml tests
      displayName: 'Run tests'

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '*.xml'
        failTaskOnFailedTests: true
        testRunTitle: 'GudPy on Python $(python.version) (windows)'
      condition: succeededOrFailed()
  - job: "Test_macOS"
    pool:
      vmImage: macOS-latest
    strategy:
      matrix:
        Python36:
          python.version: '3.6'
        Python37:
          python.version: '3.7'
        Python38:
          python.version: '3.8'
      maxParallel: 3
    steps:
    - checkout: none

    - task: DownloadPipelineArtifact@2
      displayName: "Download artifact from Linting stage"
      inputs:
        buildType: "current"
        artifactName: "FORMATTED_GudPy_macOS-latest_python$(python.version)"
        targetPath: "$(System.DefaultWorkingDirectory)"
    - task: UsePythonVersion@0
      inputs:
       versionSpec: '$(python.version)'
       architecture: "x64"
    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      displayName: "Install dependencies"
      
    - script: |
        pip install nose2
        nose2 --plugin nose2.plugins.junitxml --junit-xml tests
      displayName: 'Run tests'

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '*.xml'
        failTaskOnFailedTests: true
        testRunTitle: 'GudPy on Python $(python.version) (macOS)'
      condition: succeededOrFailed()
- stage: Build
  displayName: Build executable
  dependsOn: Test
  condition: succeeded()
  jobs:
  - job: "Build_ubtuntu"
    pool:
      vmImage: ubuntu-latest
    strategy:
      matrix:
        Python36:
          python.version: '3.6'
        Python37:
          python.version: '3.7'
        Python38:
          python.version: '3.8'
      maxParallel: 3
    steps:
      - checkout: none
      - task: DownloadPipelineArtifact@2
        displayName: "Download artifact from Linting stage"
        inputs:
          buildType: "current"
          artifactName: "FORMATTED_GudPy_ubuntu-latest_python$(python.version)"
          targetPath: "$(System.DefaultWorkingDirectory)"
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '$(python.version)'
          architecture: "x64"
        
      - script: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
        displayName: "Install dependencies"
      
      - script: pyinstaller gudpy.spec
  - job: "Build_windows"
    pool:
      vmImage: windows-latest
    strategy:
      matrix:
        Python36:
          python.version: '3.6'
        Python37:
          python.version: '3.7'
        Python38:
          python.version: '3.8'
      maxParallel: 3
    steps:
      - checkout: none
      - task: DownloadPipelineArtifact@2
        displayName: "Download artifact from Linting stage"
        inputs:
          buildType: "current"
          artifactName: "FORMATTED_GudPy_windows-latest_python$(python.version)"
          targetPath: "$(System.DefaultWorkingDirectory)"
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '$(python.version)'
          architecture: "x86"
        
      - script: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
        displayName: "Install dependencies"
      
      - script: pyinstaller gudpy.spec
  - job: "Build_macOS"
    pool:
      vmImage: macOS-latest
    strategy:
      matrix:
        Python36:
          python.version: '3.6'
        Python37:
          python.version: '3.7'
        Python38:
          python.version: '3.8'
      maxParallel: 3
    steps:
      - checkout: none
      - task: DownloadPipelineArtifact@2
        displayName: "Download artifact from Linting stage"
        inputs:
          buildType: "current"
          artifactName: "FORMATTED_GudPy_macOS-latest_python$(python.version)"
          targetPath: "$(System.DefaultWorkingDirectory)"
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '$(python.version)'
          architecture: "x64"
        
      - script: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
        displayName: "Install dependencies"
      
      - script: pyinstaller gudpy.spec
 # jobs:
  # - job: 'Test_Linux'
  #   pool:
  #     vmImage: ubuntu-latest
  #   strategy:
  #     matrix:
  #       # Python27:
  #       #   python.version: '2.7'
  #       # Python35:
  #       #   python.version: '3.5'
  #       # Python36:
  #       #   python.version: '3.6.14'
  #       Python37:
  #         python.version: '3.7'
  #   steps:
  #   - task: UsePythonVersion@0
  #     inputs:
  #       versionSpec: '$(python.version)'
  #     displayName: 'Use Python $(python.version)'

  #   - script: |
  #       python -m pip install --upgrade pip
  #       pip install -r requirements.txt
  #     displayName: 'Install dependencies'

  #   - script: |
  #       pip install nose2
  #       nose2 --plugin nose2.plugins.junitxml --junit-xml tests
  #     displayName: 'Run tests'

  #   - task: PublishTestResults@2
  #     inputs:
  #       testResultsFormat: 'JUnit'
  #       testResultsFiles: '*.xml'
  #       failTaskOnFailedTests: true
  #       testRunTitle: 'GudPy on Python $(python.version)'
  #     condition: succeededOrFailed()

    